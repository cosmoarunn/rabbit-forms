#summary This page describles how to customize templates of Rabbit Forms to make it apropriated to your site
#labels Phase-Implementation,Featured

= Rabbit Form Templates =

Rabbit Forms is maded to be integrated in your site, and we know the layout of the things will be displayed is very important, because of this we made a high customizable template engine to support wherever you need.

== The Basis ==

The Rabbit Forms has only two types of template:

|| *Type* || *Description* ||
|| Form Template || This template is used to display a form generated by Rabbit Forms ||
|| Retrive Template || This template is used to display a form retrival generated by Rabbit Forms ||

Rabbit Forms provides basic templates to use, the basic templates is CSS customizable and are wrote to supply many needs of normal applications, using CSS to customize this templates is named _Basic Templating_. To add a little bit of more customize the views can has some attributes, the template parameters is describled below.

But we know in some cases in need a full customized templates, and because of this you can write your own templates to supply these needs, it's called _Advanced Templating_.

You will know about these two templating ways in sections below.

== Template Parameters ==

One magic variable is passed to all template views, this variable is simple called _$param_ and it is one Rabbit_Field_Container instance containing template parameters (this parameters is set by configuration, see how to pass parameteres in configuration section).

How to use this parameters is explained in _Advanced Templating_ section.

== Basic Templating ==

The simplest way to customize Rabbit Forms template is by using CSS files. The base template views is maded using XHTML patterns and able you to customize templates by only using CSS files, the sections below describles how to do this for each template type.

=== Form Template ===

Form base template is a tableless form writen with many div tags, the form template is basically compound of three sections:

  * field label - The label of field
  * field component - The html of field
  * field error - The error displayed if field has validation error

The base HTML to CSS customize is:

{{{
<?php foreach($fields as $field): ?>
<div class="rabbit-field-container">
    <div class="rabbit-field-label"><?= $field['label'] ?>:</div>
    <div class="rabbit-field-component"><?= $field['component'] ?></div>
    <div class="rabbit-field-error"><?= $field['validation'] ?></div>
    <div class="rabbit-field-clear"></div>
</div>
<?php endforeach; ?>
<button type="submit" class="rabbit-form-submit">OK</button>
}}}

The code is self explain, you can use your CSS creativity to layout this (if you has some CSS experience you need there is many things can be did using this).

This is a sample CSS to you try:

{{{
.rabbit-field-container {
    background: #cfc;
    margin: 10px;
    padding: 10px;
}

.rabbit-field-label {
    float: left;
    width: 150px;
}

.rabbit-field-component {
    float: left;
    width: 200px;
}

.rabbit-field-error {
    color: #f00;
}

.rabbit-field-clear {
    clear: both;
}

.rabbit-form-submit {
    background: #cfc;
    border: 1px solid #000;
    margin-left: 10px;
}
}}}

Using this css code, instead of view this...

http://img141.imageshack.us/img141/573/defaultshotph9.gif

You will see this!

http://img221.imageshack.us/img221/4128/formshotar3.gif

*Basic Form Template Parameters*

List of basic form template parameters

|| *Parameter* || *Default* || *Description* ||
|| submitText || OK || The text to be displayed into submit button (you can use HTML) ||

And this is all about form basic templating, i know you can do better than me ;)

=== Retrive Template ===

The basic template of retrive is a basic table, this uses _thead_ and _tbody_ to separate headers from content, the html code is the below:

{{{
<div class="rabbit-retrive-add-container">
    <a href="<?= site_url($manage) ?>" class="rabbit-retrive-add"><?= $params->get('addText', 'Add new record') ?></a>
</div>
<table class="rabbit-retrive-table">
    <thead>
        <tr>
            <?php foreach($fields as $field): ?>
            <th><?= $field ?></th>
            <?php endforeach; ?>
            <th colspan="2"></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach($rows as $row): ?>
        <tr>
            <?php foreach($kfields as $field): ?>
            <th><?= $row[$field] ?></th>
            <?php endforeach; ?>
            <th><a href="<?= site_url($manage . $row['rabbit_row_id']) ?>" /><?= $params->get('editText', 'edit') ?></a></th>
            <th><a href="<?= site_url($delete . $row['rabbit_row_id']) ?>" /><?= $params->get('removeText', 'remove') ?></a></th>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>
}}}

And how you see, in the top of table is a link to add a new register (redirect to manage page)

The ideia is the same, use CSS to customize defined classes.

Sample (let's did a sample like google code table, hehe):

{{{
.rabbit-retrive-add-container {
    background: #eee;
    border: 1px solid #aaa;
    margin: 0 2px;
    padding: 5px;
    width: 105px;
}

.rabbit-retrive-table td {
    border: 1px solid #aaa;
    padding: 5px;
}

.rabbit-retrive-table thead td {
    font-weight: bold;
}

.rabbit-retrive-table a, .rabbit-retrive-add {
    color: #000;
    font-style: italic;
    text-decoration: none;
}
}}}

Using this css code, instead of view this...

http://img233.imageshack.us/img233/7594/retrivebaserf9.gif

You will see this!

http://img233.imageshack.us/img233/9462/retrivestylezedqd0.jpg

*Basic Form Template Parameters*

List of basic form template parameters

|| *Parameter* || *Default* || *Description* ||
|| addText || Add new record || HTML to display into add record link ||
|| tableSpacing || 2 || Cell spacing of table ||
|| editText || edit || HTML to display into edit link ||
|| removeText || remove || HTML to display into remove link ||

And that is all, see following sections to know how to use _Advanced Templating_.

== Advanced Templating ==

The advanced templating is really simple, basically you copy one of basic templates and edit it for your needs, and you can use template parameters to able customizations into your template. To use parameters you will use the _$param_ variable, this is one object and the only method you will need to use is *$param->get('paramToGet', 'defaultValue')*.

To use your templates you need to configure it, you can configure it at form configuration level (in YML file) or by setting your template as default (in rabbit-forms configuration). To see details about where is to configure it see wiki configuration at wiki.

See below details about each template type.

=== Form Template ===

At first, see variables provided to this template:

|| *Variable* || *Description* ||
|| form_assets || This variable contains the form assets, it needs to be in top of template to load needed resources for fields (ps: this variable will be an empty string if  _auto_assets_ is set to _false_ ||
|| form_open || This variable contains the string that open form ||
|| form_hidden || This variable contains the form hidden fields ||
|| form_close || This variable contains the string that close form ||
|| form_exec || This variable contains form script to be executed (each field can add these script executions) ||
|| fields || This variable in one associative array containing form fields (details below) ||

Each item into fields variable contains:

|| *Variable* || *Description* ||
|| label || The label of field ||
|| component || HTML string of field ||
|| validation || The validation error message ||

In a basic way you will use the variables of form and a foreach to put fields in that place, but, for your convenience (and to able high custom forms) the array containing fields is associative, and the keys is the field name. With this information you can create templates for specific forms putting each field in one way; the code above demonstrate this use:

{{{
<?= $form_assets ?>
<?= $form_open ?>
<?= $form_hidden ?>
<table>
    <tr>
        <td><?= $fields['name']['label'] ?></td>
        <td><?= $fields['name']['component'] ?><br /><?= $fields['name']['validation'] ?></td>
        <td><?= $fields['login']['label'] ?></td>
        <td><?= $fields['login']['component'] ?><br /><?= $fields['login']['validation'] ?></td>
    </tr>
    <tr>
        <td><?= $fields['email']['label'] ?></td>
        <td colspan="3"><?= $fields['email']['component'] ?><br /><?= $fields['email']['validation'] ?></td>
    </tr>
    <tr>
        <td><?= $fields['password']['label'] ?></td>
        <td><?= $fields['password']['component'] ?><br /><?= $fields['password']['validation'] ?></td>
        <td><?= $fields['passconfirm']['label'] ?></td>
        <td><?= $fields['passconfirm']['component'] ?><br /><?= $fields['passconfirm']['validation'] ?></td>
    </tr>
</table>
<button type="submit" class="rabbit-form-submit"><?= $params->get('submitText', 'OK') ?></button>
<?= $form_close ?>
<?= $form_exec ?>
}}}

This template will output:

http://img217.imageshack.us/img217/6933/advancedformuu3.jpg

And that is all, is not so hard uh?

=== Retrive Template ===

The retrive template follow the same path of form template, below is the variables that you can use:

|| *Variable* || *Description* ||
|| fields || Simple array containg field labels ||
|| rows || The rows variable is one array containg rows data of each row (see details below) ||
|| kfields || This simple array contains fields key data ||

Each row entry has row data in one associative array (the keys is the field name)

== Summary ==

This page describled how to customize templates for use Rabbit Forms into your site, any questions post into wiki page comments.